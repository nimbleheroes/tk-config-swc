# Copyright (c) 2017 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

################################################################################

includes:
- ../app_locations.yml

################################################################################

entity_browser_settings: &entity_browser_settings
  entities:
  - caption: Content
    entity_type: Asset
    hierarchy: [project, sg_asset_library, sg_asset_type, sg_asset_category, code]
    filters:
      - [sg_asset_parent, is, [ null ]]
      - [project.Project.sg_status, is, ["Active"]]
  - caption: Children
    entity_type: Asset
    hierarchy: [project, sg_asset_parent.Asset.sg_asset_library, sg_asset_parent.Asset.sg_asset_type, sg_asset_parent.Asset.sg_asset_category, sg_asset_parent.Asset.code, sg_asset_category, sg_folder_name]
    filters:
      - [sg_asset_parent, is_not, [ null ]]    
  - caption: Animations
    entity_type: CustomEntity05
    hierarchy: [project, sg_asset_parent.Asset.sg_asset_library, sg_asset_parent.Asset.sg_asset_type, sg_asset_parent.Asset.sg_asset_category, sg_asset_parent.Asset.code, sg_asset_category, sg_folder_name]
    filters: []       
  - caption: Environment
    entity_type: CustomEntity01
    hierarchy: [project, sg_asset_library, sg_asset_type, sg_biome, sg_asset_category, sg_folder_name]
    filters: [] 
  - caption: Publishing
    entity_type: CustomEntity03
    hierarchy: [project, sg_campaign, sg_product.CustomNonProjectEntity01.code, sg_use, code]
    filters: []   
  - caption: My Tasks
    entity_type: Task
    filters:
    - [task_assignees, is, '{context.user}']
    - [project, is, '{context.project}']
    hierarchy: [entity, content]    

# Desktopp
settings.tk-multi-loader2.desktop:
  #actions_hook: "{engine}/tk-multi-loader2/basic/scene_actions.py"
  action_mappings:
    Alembic Cache: [reference, import]
    Image: [texture_node, image_plane]
    Maya Scene: [reference, import]
    Photoshop Image: [texture_node, image_plane]  
    3dsmax Scene: [import, reference]
    Rendered Image: [texture_node]
    Texture: [texture_node]
  <<: *entity_browser_settings 
  publish_filters: [["sg_status_list", "is_not", null]]  
  location: "@apps.tk-multi-loader2.location"

# 3dsmax
settings.tk-multi-loader2.3dsmax:
  actions_hook: "{engine}/tk-multi-loader2/basic/scene_actions.py"
  action_mappings:
    3dsmax Scene: [import, reference]
    Alembic Cache: [import]
    Image: [texture_node]
    Rendered Image: [texture_node]
    Texture: [texture_node]
  <<: *entity_browser_settings 
  publish_filters: [["sg_status_list", "is_not", null]]  
  location: "@apps.tk-multi-loader2.location"

# houdini
settings.tk-multi-loader2.houdini:
  action_mappings:
    Alembic Cache: [import]
    Houdini Scene: [merge]
    Image: [file_cop]
    Photoshop Image: [file_cop]
    Rendered Image: [file_cop]
    Texture: [file_cop]
  <<: *entity_browser_settings 
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# maya
settings.tk-multi-loader2.maya:
  action_mappings:
    Alembic Cache: [reference, import]
    Image: [texture_node, image_plane]
    Maya Scene: [reference, import]
    Photoshop Image: [texture_node, image_plane]
    Rendered Image: [texture_node, image_plane]
    Texture: [texture_node, image_plane]
  <<: *entity_browser_settings   
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# photoshop
settings.tk-multi-loader2.photoshop:
  action_mappings:
    Photoshop Image: [add_as_a_layer, open_file]
    Rendered Image: [add_as_a_layer, open_file]
    Image: [add_as_a_layer, open_file]
    Texture: [add_as_a_layer, open_file]
  <<: *entity_browser_settings   
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# substance painter
settings.tk-multi-loader2.substancepainter:
  actions_hook: '{engine}/tk-multi-loader2/tk-substancepainter_actions.py'
  action_mappings:
    Image: [environment, colorlut, alpha, texture]
    Texture: [environment, colorlut, alpha, texture]
    Rendered Image: [environment, colorlut, alpha, texture]
    Substance Material Preset: [preset]
    Sppr File: [preset]
    PopcornFX : [script]
    Pkfx File : [script]
    Shader: [shader]
    Glsl File: [shader]
    Substance Export Preset: [export]
    Spexp File: [export]
    Substance Smart Material: [smartmaterial]
    Spsm File: [smartmaterial]
    Substance File: [basematerial, alpha, texture, filter, procedural, generator]
    Sbsar File: [basematerial, alpha, texture, filter, procedural, generator]
    Substance Smart Mask: [smartmask]
    Spmsk File: [smartmask]
  <<: *entity_browser_settings 
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# Substance Designer
settings.tk-multi-loader2.substancedesigner:
  actions_hook: '{engine}/tk-multi-loader2/tk-substancedesigner_actions.py'
  action_mappings:
    Image: [bitmap]
    Texture: [bitmap]
    Rendered Image: [bitmap]
    SVG File: [svg]
    Font: [font]
    TTF File: [font]
    FBX File: [scene]
    Motion Builder FBX: [scene]
    IES File: [light_profile]
    Ies File: [light_profile]
    MDSDF File: [bsdf_measurement]
  <<: *entity_browser_settings 
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"
