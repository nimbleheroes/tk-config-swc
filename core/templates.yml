# Copyright (c) 2015 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

#
# This file is one of the central points in the Shotgun Pipeline Toolkit configuration and
# a counterpart to the folder configuration structure.
#
# The folder structure underneath the project folder is used to create folders on disk -
# templates.yml (this file) refers to those folders. Therefore, the two files need to be
# in sync. This file contains an overview of all locations that are used by Sgtk.
#
# Whenever an app or an engine refers to a location on disk, it is using an entry defined in
# this file. For more information, see the Shotgun Pipeline Toolkit Documentation.



#
# The keys section contains the definitions for all the different keys that are being
# used by Sgtk. A key is a magic token that is replaced by a value at runtime, for example
# {Shot}. The section below tells Sgtk which data types and formats to expect for each key.
#
keys:
    Asset:
        type: str
    task_step:
        type: str
        shotgun_entity_type: Task
        shotgun_field_name: step.Step.short_name
    asset_parent:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_parent.Asset.code
    asset_library:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_library.AssetLibrary.code
    asset_library_parent:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_parent.Asset.sg_asset_library.AssetLibrary.code
    asset_type:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_type
    asset_type_parent:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_parent.Asset.sg_asset_type
    asset_category:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_category
    asset_category_parent:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_parent.Asset.sg_asset_category
    asset_class:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_class
    asset_class_parent:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: sg_asset_parent.Asset.sg_asset_class
    Step:
        type: str
    name:
        type: str
        filter_by: alphanumeric
    iteration:
        type: int
    version:
        type: int
        format_spec: "03"
    version_four:
       type: int
       format_spec: "04"
       alias: version
    timestamp:
        type: str
    width:
        type: int
    height:
        type: int
    segment_name:
        type: str


    houdini.node:
        alias: node
        type: str
    aov_name:
        type: str
    SEQ:
        type: sequence
        format_spec: "04"


    # These are used for the Mari UDIM pipeline:
    UDIM:
        type: sequence
        default: "<UDIM>"
    mari.channel:
        type: str
        alias: channel
    mari.layer:
        type: str
        alias: layer
    mari.project_name:
        type: str
        alias: name
    asset_name:
        type: str
        shotgun_entity_type: Asset
        shotgun_field_name: code
    task_name:
        type: str
        shotgun_entity_type: Task
        shotgun_field_name: content

    # Photoshop supports two extension types.
    photoshop_extension:
        type: str
        choices:
            psd: Photoshop (.psd)
            psb: Large Document Format (.psb)
        default: psd
        alias: extension

    # Maya supports two extension types.
    maya_extension:
        type: str
        choices:
            ma: Maya Ascii (.ma)
            mb: Maya Binary (.mb)
        default: ma
        alias: extension


#
# The paths section contains all the the key locations where files are to be stored
# by Sgtk Apps. Each path is made up of several keys (like {version} or {shot}) and
# these are defined in the keys section above.
#
# Apps use these paths as part of their configuration to define where on disk
# different files should go.
#

paths:

    # Common  path definitions to use as shorthand in order to avoid repetitive and verbose
    # templates. This also makes it easy to change any of the common root paths and have the
    # changes apply to all templates that use them.
    #
    # These don't require the standard formatting (with definition and root_name) because they
    # will be set within each template that uses the alias.
    # pubs_asset_root: pubs/{sg_asset_type}/{sg_asset_class}/{sg_asset_parent}/{sg_asset_category}/{Asset}/{Step}
    # work_asset_root: work/{sg_asset_type}/{sg_asset_class}/{sg_asset_parent}/{sg_asset_category}/{Asset}/{Step}
    #
    # asset_root: '{sg_asset_library}/{sg_asset_type}/{Asset}'
    # asset_child_root: '{sg_asset_library}/{sg_asset_type}/{sg_asset_parent}/{sg_asset_class}/{Asset}'
    # asset_env_root: '{sg_asset_library}/{sg_asset_type}/{sg_biome_code}/{sg_asset_category}/{sg_asset_class}/{Asset}'

    asset_root: '{asset_library}/{asset_type}/{asset_category}/{asset_class}/{Asset}'
    asset_child_root: '{asset_library_parent}/{asset_type_parent}/{asset_category_parent}/{asset_class_parent}/{asset_parent}/{asset_category}/{Asset}'

    ##########################################################################################
    # Asset pipeline


    #
    # Alembic caches
    #

    asset_alembic_cache:
        definition: '@asset_root/caches/{Asset}[_{name}]_{task_step}.abc'


    #
    # Photoshop
    #

    asset_photoshop_workfile:
        definition: '@asset_root/{Asset}[_{name}]_{task_step}.{photoshop_extension}'
    asset_photoshop_snapshot:
        definition: '@asset_root/snapshots/{Asset}[_{name}]_{task_step}.{timestamp}.{photoshop_extension}'
    asset_child_photoshop_workfile:
        definition: '@asset_child_root/{Asset}[_{name}]_{task_step}.{photoshop_extension}'
    asset_child_photoshop_snapshot:
        definition: '@asset_child_root/snapshots/{Asset}[_{name}]_{task_step}.{timestamp}.{photoshop_extension}'


    #
    # Maya
    #

    asset_maya_workfile:
        definition: '@asset_root/{Asset}[_{name}]_{task_step}.{maya_extension}'
    asset_maya_snapshot:
        definition: '@asset_root/snapshots/{Asset}[_{name}]_{task_step}.{timestamp}.{maya_extension}'

    #
    # Houdini
    #

    asset_houdini_workfile:
        definition: '@asset_root/{Asset}[_{name}]_{task_step}.hip'
    asset_houdini_snapshot:
        definition: '@asset_root/snapshots/{Asset}[_{name}]_{task_step}.{timestamp}.hip'

    #
    # 3dsmax
    #

    asset_max_workfile:
        definition: '@asset_root/{Asset}[_{name}]_{task_step}.max'
    asset_max_snapshot:
        definition: '@asset_root/snapshots/{Asset}[_{name}]_{task_step}.{timestamp}.max'


#
# The strings section is similar to the paths section - but rather than defining paths
# on disk, it contains a list of strings. Strings are typically used when you want to be
# able to configure the way data is written to shotgun - it may be the name field for a
# review version or the formatting of a publish.
#

strings:

    # we have to have a string here
    null_string: string
